/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode fakeHead = new ListNode(0);
        fakeHead.next = head;
        ListNode curr = fakeHead.next;
        ListNode prev = fakeHead;
        for(int i=1; i<m; i++){
            prev = curr;
            curr = curr.next;
        }
        ListNode node = prev;
        for(int i=m; i<=n; i++){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        node.next.next = curr;
        node.next = prev;
        return fakeHead.next;
    }
}
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Reverse Linked List II.
// Memory Usage: 36.5 MB, less than 75.75% of Java online submissions for Reverse Linked List II.
