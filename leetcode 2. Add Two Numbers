/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result = new ListNode(0);
        ListNode sum = result;
        int carry = 0, m1,m2 ;
        while(l1 != null || l2!= null){
            if( l1 == null) m1 = 0;
            else m1 = l1.val;
            if (l2 == null) m2 = 0;
            else m2 = l2.val;
            int add = m1+m2+ carry;
            carry= add>9? 1:0;
            ListNode temp = new ListNode(0); 
            temp.val = add%10;
            sum.next = temp;
            sum = sum.next;
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
        }
        if(carry == 1){
            ListNode temp = new ListNode(0);
            temp.val = carry;
            sum.next = temp;
        }
        return result.next;
    }
}
// Runtime: 2 ms, faster than 80.00% of Java online submissions for Add Two Numbers.
// Memory Usage: 39.1 MB, less than 86.78% of Java online submissions for Add Two Numbers.
