/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode curr = l1;
        ListNode prev = null;
        ListNode merge = new ListNode(0);
        ListNode  fakeHead= merge;
        while( l1 != null && l2 !=null ){
            if(l1.val > l2.val){
                fakeHead.next = l2;
                l2 = l2.next;
            }else {
                fakeHead.next = l1;
                l1 = l1.next;
            }
            fakeHead = fakeHead.next;
        }
        if(l1 != null) fakeHead.next = l1;
        else if(l2 != null) fakeHead.next = l2;
        return merge.next;
    }
}
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Two Sorted Lists.
// Memory Usage: 38.8 MB, less than 13.20% of Java online submissions for Merge Two Sorted Lists.
